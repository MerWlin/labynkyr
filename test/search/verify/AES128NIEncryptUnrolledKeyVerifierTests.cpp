/*
 * University of Bristol â€“ Open Access Software Licence
 * Copyright (c) 2016, The University of Bristol, a chartered
 * corporation having Royal Charter number RC000648 and a charity
 * (number X1121) and its place of administration being at Senate
 * House, Tyndall Avenue, Bristol, BS8 1TH, United Kingdom.
 * All rights reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * Any use of the software for scientific publications or commercial
 * purposes should be reported to the University of Bristol
 * (OSI-notifications@bristol.ac.uk and quote reference 2514). This is
 * for impact and usage monitoring purposes only.
 *
 * Enquiries about further applications and development opportunities
 * are welcome. Please contact elisabeth.oswald@bristol.ac.uk
*/
/*
 * AES128NIEncryptUnrolledKeyVerifierTests.cpp
 *
 */

#include "src/labynkyr/search/verify/AES128NIEncryptUnrolledKeyVerifier.hpp"

#include <unittest++/UnitTest++.h>

#include <vector>

namespace labynkyr {
namespace search {

TEST(AES128NIEncryptUnrolledKeyVerifier_vector1) {
	std::vector<uint8_t> const key = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
	std::vector<uint8_t> const ciphertext = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};

	std::vector<uint8_t> const k1 = {0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k2 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x04, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k3 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0a};
	std::vector<uint8_t> const k4 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

	AES128NIEncryptUnrolledKeyVerifier verifier(plaintext, ciphertext);
	CHECK_EQUAL(0, verifier.keysChecked());
	CHECK(!verifier.success());
	verifier.checkKey(k1);
	CHECK(!verifier.success());
	CHECK_EQUAL(1, verifier.keysChecked());
	verifier.checkKey(k2);
	CHECK(!verifier.success());
	CHECK_EQUAL(2, verifier.keysChecked());
	verifier.checkKey(k3);
	CHECK(!verifier.success());
	CHECK_EQUAL(3, verifier.keysChecked());
	verifier.checkKey(k4);
	CHECK(verifier.success());
	CHECK_EQUAL(4, verifier.keysChecked());
	CHECK_ARRAY_EQUAL(key, verifier.correctKey().asBytes(), key.size());
}

TEST(AES128NIEncryptUnrolledKeyVerifier_three) {
	std::vector<uint8_t> const key = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
	std::vector<uint8_t> const ciphertext = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};

	std::vector<uint8_t> const k1 = {0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k2 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x04, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k3 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0a};
	std::vector<uint8_t> const k4 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

	AES128NIEncryptUnrolledKeyVerifier verifier(plaintext, ciphertext);
	verifier.checkKey(k1);
	verifier.checkKey(k2);
	verifier.checkKey(k4);
	CHECK(!verifier.success());
	CHECK_EQUAL(3, verifier.keysChecked());
}

TEST(AES128NIEncryptUnrolledKeyVerifier_three_flush) {
	std::vector<uint8_t> const key = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
	std::vector<uint8_t> const ciphertext = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};

	std::vector<uint8_t> const k1 = {0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k2 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x04, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k3 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0a};
	std::vector<uint8_t> const k4 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

	AES128NIEncryptUnrolledKeyVerifier verifier(plaintext, ciphertext);
	verifier.checkKey(k1);
	verifier.checkKey(k2);
	verifier.checkKey(k4);
	verifier.flush();
	CHECK(verifier.success());
	CHECK_EQUAL(3, verifier.keysChecked());
	CHECK_ARRAY_EQUAL(key, verifier.correctKey().asBytes(), key.size());
}

TEST(AES128NIEncryptUnrolledKeyVerifier_twoBatch) {
	std::vector<uint8_t> const key = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
	std::vector<uint8_t> const ciphertext = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};

	std::vector<uint8_t> const k1 = {0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k2 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x04, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k3 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0a};
	std::vector<uint8_t> const k4 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

	AES128NIEncryptUnrolledKeyVerifier verifier(plaintext, ciphertext);
	verifier.checkKey(k1);
	verifier.checkKey(k1);
	verifier.checkKey(k1);
	verifier.checkKey(k1);
	verifier.checkKey(k2);
	verifier.checkKey(k4);
	verifier.checkKey(k1);
	verifier.checkKey(k1);
	CHECK(verifier.success());
	CHECK_EQUAL(8, verifier.keysChecked());
	auto actual = std::move(verifier.correctKey());
	CHECK_ARRAY_EQUAL(key, verifier.correctKey().asBytes(), key.size());
}

TEST(AES128NIEncryptUnrolledKeyVerifier_twoBatch_flush) {
	std::vector<uint8_t> const key = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
	std::vector<uint8_t> const ciphertext = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};

	std::vector<uint8_t> const k1 = {0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k2 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x04, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k3 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0a};
	std::vector<uint8_t> const k4 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

	AES128NIEncryptUnrolledKeyVerifier verifier(plaintext, ciphertext);
	verifier.checkKey(k1);
	verifier.checkKey(k1);
	verifier.checkKey(k1);
	verifier.checkKey(k1);
	verifier.checkKey(k2);
	verifier.checkKey(k4);
	verifier.checkKey(k1);
	verifier.flush();
	CHECK(verifier.success());
	CHECK_EQUAL(7, verifier.keysChecked());
	CHECK_ARRAY_EQUAL(key, verifier.correctKey().asBytes(), key.size());
}

TEST(AES128NIEncryptUnrolledKeyVerifier_vector1_factory) {
	std::vector<uint8_t> const key = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
	std::vector<uint8_t> const ciphertext = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};

	std::vector<uint8_t> const k1 = {0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k2 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x04, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	std::vector<uint8_t> const k3 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0a};
	std::vector<uint8_t> const k4 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

	AES128NIEncryptUnrolledKeyVerifierFactory factory(plaintext, ciphertext);
	auto verifier = factory.newVerifier();
	CHECK_EQUAL(0, verifier->keysChecked());
	CHECK(!verifier->success());
	verifier->checkKey(k1);
	CHECK(!verifier->success());
	CHECK_EQUAL(1, verifier->keysChecked());
	verifier->checkKey(k2);
	CHECK(!verifier->success());
	CHECK_EQUAL(2, verifier->keysChecked());
	verifier->checkKey(k3);
	CHECK(!verifier->success());
	CHECK_EQUAL(3, verifier->keysChecked());
	verifier->checkKey(k4);
	CHECK(verifier->success());
	CHECK_EQUAL(4, verifier->keysChecked());
	CHECK_ARRAY_EQUAL(key, verifier->correctKey().asBytes(), key.size());
}

} /* namespace search */
} /* namespace labynkyr */
